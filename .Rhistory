# Study name---
study<-"seasonal.halos.ningaloo"
## Set your working directory ----
working.dir <-  "~/Repositories/Seasonal_Halos_Ningaloo"
## Save these directory names to use later----
data.dir<-paste(working.dir,"Data",sep="/")
plots.dir=paste(working.dir,"Plots",sep="/")
tidy.dir<-paste(data.dir,"Tidy",sep="/")
raw.dir<-paste(data.dir,"Raw",sep="/")
error.dir=paste(data.dir,"Errors to check",sep="/")
shapefile.dir <- paste(data.dir,"Shapefiles",sep="/")
# Read in the data----
setwd(shapefile.dir)
dir()
# Define a vector with the filenames of the shapefiles (removed 20170726 as corrupt?)
shapefile_filenames <- c("Measurements_20210128_Cloates.shp", "Measurements_20210321_Cloates.shp",
"Measurements_20210421_Cloates.shp", "Measurements_20210521_Cloates.shp",
"Measurements_20210628_Cloates.shp", "Measurements_20210723_Cloates.shp",
"Measurements_20210819_Cloates.shp", "Measurements_20210927_Cloates.shp",
"Measurements_20211030_Cloates.shp", "Measurements_20211220_Cloates.shp",
"Measurements_20191203_Cloates.shp", "Measurements_20191107_Cloates.shp",
"Measurements_20190620_Cloates.shp", "Measurements_20190516_Cloates.shp",
"Measurements_20190426_Cloates.shp", "Measurements_20190307_Cloates.shp",
"Measurements_20190220_Cloates.shp", "Measurements_20190110_Cloates.shp",
"Measurements_20181229_Cloates.shp", "Measurements_20181126_Cloates.shp",
"Measurements_20180922_Cloates.shp", "Measurements_20180823_Cloates.shp",
"Measurements_20180727_Cloates.shp", "Measurements_20180629_Cloates.shp",
"Measurements_20180521_Cloates.shp", "Measurements_20180403_Cloates.shp",
"Measurements_20180201_Cloates.shp", "Measurements_20180106_Cloates.shp",
"Measurements_20171027_Cloates.shp",
"Measurements_20170629_Cloates.shp", "Measurements_20170412_Cloates.shp",
"Measurements_20170331_Cloates.shp", "Measurements_20170113_Cloates.shp",
"Measurement_20190920_Cloates.shp", "Measurement_20190811_Cloates.shp",
"Measurement_20190731_Cloates.shp", "Measurement_20170905_Cloates.shp")
# Create an empty data frame to store mean lengths from all shapefiles
all_mean_lengths <- data.frame()
# Loop through the shapefile filenames
for (filename in shapefile_filenames) {
cat("Processing:", filename, "\n")
# Read the shapefile
shapefile <- st_read(filename)
# Extract the date from the filename using regular expressions
date <- gsub(".*_(\\d{8})_.*", "\\1", filename)
# Convert the shapefile to a dataframe
shapefile_df <- as.data.frame(shapefile) %>%
dplyr::select(id, Location, Status, Measure) %>%
glimpse()
# Calculate the length of each line
shapefile_df$LineLength <- st_length(shapefile)
# Add a "date" column to the dataframe
shapefile_df$date <- date
# Group by 'date', 'id', and calculate the mean length for each group
mean_lengths <- shapefile_df %>%
na.omit() %>%
filter(Location == "Cloates") %>%
group_by(date, id) %>%
dplyr::mutate(MeanLength = mean(LineLength))
# Append the mean lengths to the 'all_mean_lengths' data frame
all_mean_lengths <- bind_rows(all_mean_lengths, mean_lengths)
cat("Processed:", filename, "\n")
}
glimpse(all_mean_lengths)
glimpse(all_mean_lengths)
# Define a vector with the filenames of the shapefiles (removed 20170726 as corrupt?)
shapefile_filenames <- c("Measurements_20210128_Cloates.shp", "Measurements_20210321_Cloates.shp",
"Measurements_20210421_Cloates.shp", "Measurements_20210521_Cloates.shp",
"Measurements_20210628_Cloates.shp", "Measurements_20210723_Cloates.shp",
"Measurements_20210819_Cloates.shp", "Measurements_20210927_Cloates.shp",
"Measurements_20211030_Cloates.shp", "Measurements_20211220_Cloates.shp",
"Measurements_20191203_Cloates.shp", "Measurements_20191107_Cloates.shp",
"Measurements_20190620_Cloates.shp", "Measurements_20190516_Cloates.shp",
"Measurements_20190426_Cloates.shp", "Measurements_20190307_Cloates.shp",
"Measurements_20190220_Cloates.shp", "Measurements_20190110_Cloates.shp",
"Measurements_20181229_Cloates.shp", "Measurements_20181126_Cloates.shp",
"Measurements_20180922_Cloates.shp", "Measurements_20180823_Cloates.shp",
"Measurements_20180727_Cloates.shp", "Measurements_20180629_Cloates.shp",
"Measurements_20180521_Cloates.shp", "Measurements_20180403_Cloates.shp",
"Measurements_20180201_Cloates.shp", "Measurements_20180106_Cloates.shp",
"Measurements_20171027_Cloates.shp",
"Measurements_20170629_Cloates.shp", "Measurements_20170412_Cloates.shp",
"Measurements_20170331_Cloates.shp", "Measurements_20170113_Cloates.shp",
"Measurement_20190920_Cloates.shp", "Measurement_20190811_Cloates.shp",
"Measurement_20190731_Cloates.shp", "Measurement_20170905_Cloates.shp")
# Create an empty data frame to store mean lengths from all shapefiles
all_mean_lengths <- data.frame()
# Loop through the shapefile filenames
for (filename in shapefile_filenames) {
cat("Processing:", filename, "\n")
# Read the shapefile
shapefile <- st_read(filename)
# Extract the date from the filename using regular expressions
date <- gsub(".*_(\\d{8})_.*", "\\1", filename)
# Convert the shapefile to a dataframe
shapefile_df <- as.data.frame(shapefile) %>%
dplyr::select(id, Location, Status, Measure) %>%
glimpse()
# Calculate the length of each line
shapefile_df$LineLength <- st_length(shapefile)
# Extract latitude and longitude for each unique 'id'
coordinates <- st_coordinates(shapefile) %>%
as.data.frame() %>%
distinct(X = X, Y = Y, id)
# Add a "date" column to the dataframe
shapefile_df$date <- date
# Group by 'date', 'id', and calculate the mean length for each group
mean_lengths <- shapefile_df %>%
na.omit() %>%
filter(Location == "Cloates") %>%
group_by(date, id) %>%
dplyr::mutate(MeanLength = mean(LineLength))
# Append the mean lengths to the 'all_mean_lengths' data frame
all_mean_lengths <- bind_rows(all_mean_lengths, mean_lengths)
cat("Processed:", filename, "\n")
}
# Extract latitude and longitude for each unique 'id' and add to 'all_mean_lengths'
coordinates_all <- st_coordinates(all_mean_lengths %>%
distinct(id))
all_mean_lengths$lat <- coordinates_all$Y
all_mean_lengths$lon <- coordinates_all$X
glimpse(all_mean_lengths)
glimpse(all_mean_lengths)
# Create an empty data frame to store mean lengths from all shapefiles
all_mean_lengths <- data.frame()
library(sf)
library(dplyr)
# Loop through the shapefile filenames
for (filename in shapefile_filenames) {
cat("Processing:", filename, "\n")
# Read the shapefile
shapefile <- st_read(filename)
# Extract the date from the filename using regular expressions
date <- gsub(".*_(\\d{8})_.*", "\\1", filename)
# Convert the shapefile to a dataframe
shapefile_df <- as.data.frame(shapefile) %>%
dplyr::select(id, Location, Status, Measure) %>%
glimpse()
# Calculate the length of each line
shapefile_df$LineLength <- st_length(shapefile)
# Extract latitude and longitude for each unique 'id'
coordinates <- st_coordinates(shapefile) %>%
as.data.frame() %>%
distinct(X = X, Y = Y, id)
# Add a "date" column to the dataframe
shapefile_df$date <- date
# Group by 'date', 'id', and calculate the mean length for each group
mean_lengths <- shapefile_df %>%
na.omit() %>%
filter(Location == "Cloates") %>%
group_by(date, id) %>%
dplyr::mutate(MeanLength = mean(LineLength))
# Append the mean lengths and coordinates to the 'all_mean_lengths' data frame
all_mean_lengths <- bind_rows(all_mean_lengths, mean_lengths)
cat("Processed:", filename, "\n")
}
# Extract latitude and longitude for each unique 'id' and add to 'all_mean_lengths'
coordinates_all <- st_coordinates(all_mean_lengths %>%
distinct(id))
# Loop through the shapefile filenames
for (filename in shapefile_filenames) {
cat("Processing:", filename, "\n")
# Read the shapefile
shapefile <- st_read(filename)
# Extract the date from the filename using regular expressions
date <- gsub(".*_(\\d{8})_.*", "\\1", filename)
# Convert the shapefile to a dataframe
shapefile_df <- as.data.frame(shapefile) %>%
dplyr::select(id, Location, Status, Measure) %>%
glimpse()
# Calculate the length of each line
shapefile_df$LineLength <- st_length(shapefile)
# Add a "date" column to the dataframe
shapefile_df$date <- date
# Group by 'date', 'id', and calculate the mean length for each group
mean_lengths <- shapefile_df %>%
na.omit() %>%
filter(Location == "Cloates") %>%
group_by(date, id) %>%
dplyr::mutate(MeanLength = mean(LineLength))
# Append the mean lengths to the 'all_mean_lengths' data frame
all_mean_lengths <- bind_rows(all_mean_lengths, mean_lengths)
cat("Processed:", filename, "\n")
}
# Define a vector with the filenames of the shapefiles (removed 20170726 as corrupt?)
shapefile_filenames <- c("Measurements_20210128_Cloates.shp", "Measurements_20210321_Cloates.shp",
"Measurements_20210421_Cloates.shp", "Measurements_20210521_Cloates.shp",
"Measurements_20210628_Cloates.shp", "Measurements_20210723_Cloates.shp",
"Measurements_20210819_Cloates.shp", "Measurements_20210927_Cloates.shp",
"Measurements_20211030_Cloates.shp", "Measurements_20211220_Cloates.shp",
"Measurements_20191203_Cloates.shp", "Measurements_20191107_Cloates.shp",
"Measurements_20190620_Cloates.shp", "Measurements_20190516_Cloates.shp",
"Measurements_20190426_Cloates.shp", "Measurements_20190307_Cloates.shp",
"Measurements_20190220_Cloates.shp", "Measurements_20190110_Cloates.shp",
"Measurements_20181229_Cloates.shp", "Measurements_20181126_Cloates.shp",
"Measurements_20180922_Cloates.shp", "Measurements_20180823_Cloates.shp",
"Measurements_20180727_Cloates.shp", "Measurements_20180629_Cloates.shp",
"Measurements_20180521_Cloates.shp", "Measurements_20180403_Cloates.shp",
"Measurements_20180201_Cloates.shp", "Measurements_20180106_Cloates.shp",
"Measurements_20171027_Cloates.shp",
"Measurements_20170629_Cloates.shp", "Measurements_20170412_Cloates.shp",
"Measurements_20170331_Cloates.shp", "Measurements_20170113_Cloates.shp",
"Measurement_20190920_Cloates.shp", "Measurement_20190811_Cloates.shp",
"Measurement_20190731_Cloates.shp", "Measurement_20170905_Cloates.shp")
# Create an empty data frame to store mean lengths from all shapefiles
all_mean_lengths <- data.frame()
# Loop through the shapefile filenames
for (filename in shapefile_filenames) {
cat("Processing:", filename, "\n")
# Read the shapefile
shapefile <- st_read(filename)
# Extract the date from the filename using regular expressions
date <- gsub(".*_(\\d{8})_.*", "\\1", filename)
# Convert the shapefile to a dataframe
shapefile_df <- as.data.frame(shapefile) %>%
dplyr::select(id, Location, Status, Measure) %>%
glimpse()
# Calculate the length of each line
shapefile_df$LineLength <- st_length(shapefile)
# Extract latitude and longitude for each unique 'id'
coordinates <- st_coordinates(shapefile) %>%
as.data.frame() %>%
distinct(X = X, Y = Y, id)
# Add a "date" column to the dataframe
shapefile_df$date <- date
# Group by 'date', 'id', and calculate the mean length for each group
mean_lengths <- shapefile_df %>%
na.omit() %>%
filter(Location == "Cloates") %>%
group_by(date, id) %>%
dplyr::mutate(MeanLength = mean(LineLength))
# Append the mean lengths and coordinates to the 'all_mean_lengths' data frame
all_mean_lengths <- bind_rows(all_mean_lengths, mean_lengths)
cat("Processed:", filename, "\n")
}
# Loop through the shapefile filenames
for (filename in shapefile_filenames) {
cat("Processing:", filename, "\n")
# Read the shapefile
shapefile <- st_read(filename)
# Extract the date from the filename using regular expressions
date <- gsub(".*_(\\d{8})_.*", "\\1", filename)
# Convert the shapefile to a dataframe
shapefile_df <- as.data.frame(shapefile) %>%
dplyr::select(id, Location, Status, Measure) %>%
glimpse()
# Calculate the length of each line
shapefile_df$LineLength <- st_length(shapefile)
# Extract latitude and longitude for each unique 'id'
coordinates <- shapefile %>%
group_by(id) %>%
dplyr::summarize(lat = mean(st_coordinates(.)[, "Y"]),
lon = mean(st_coordinates(.)[, "X"]))
# Add a "date" column to the dataframe
shapefile_df$date <- date
# Group by 'date', 'id', and calculate the mean length for each group
mean_lengths <- shapefile_df %>%
na.omit() %>%
filter(Location == "Cloates") %>%
group_by(date, id) %>%
dplyr::mutate(MeanLength = mean(LineLength))
# Append the mean lengths and coordinates to the 'all_mean_lengths' data frame
all_mean_lengths <- bind_rows(all_mean_lengths, mean_lengths)
cat("Processed:", filename, "\n")
}
glimpse(all_mean_lengths)
# Extract latitude and longitude for each unique 'id' and add to 'all_mean_lengths'
coordinates_all <- st_coordinates(all_mean_lengths %>%
distinct(id))
all_mean_lengths$lat <- coordinates_all$Y
all_mean_lengths$lon <- coordinates_all$X
glimpse(all_mean_lengths)
# Initialize an empty dataframe to store ID, lat, and lon
unique_coords <- data.frame(id = character(0), lat = numeric(0), lon = numeric(0))
# Loop through the shapefile filenames
for (filename in shapefile_filenames) {
cat("Processing:", filename, "\n")
# Read the shapefile
shapefile <- st_read(filename)
# Extract the date from the filename using regular expressions
date <- gsub(".*_(\\d{8})_.*", "\\1", filename)
# Convert the shapefile to a dataframe
shapefile_df <- as.data.frame(shapefile) %>%
dplyr::select(id, Location, Status, Measure) %>%
glimpse()
# Calculate the length of each line
shapefile_df$LineLength <- st_length(shapefile)
# Extract latitude and longitude for each unique 'id'
coordinates <- shapefile %>%
group_by(id) %>%
summarize(lat = mean(st_coordinates(.)[, "Y"]),
lon = mean(st_coordinates(.)[, "X"]))
# Add the unique coordinates to the 'unique_coords' dataframe
unique_coords <- bind_rows(unique_coords, coordinates)
# Add a "date" column to the dataframe
shapefile_df$date <- date
# Group by 'date', 'id', and calculate the mean length for each group
mean_lengths <- shapefile_df %>%
na.omit() %>%
filter(Location == "Cloates") %>%
group_by(date, id) %>%
dplyr::mutate(MeanLength = mean(LineLength))
# Append the mean lengths to the 'all_mean_lengths' data frame
all_mean_lengths <- bind_rows(all_mean_lengths, mean_lengths)
cat("Processed:", filename, "\n")
}
# Merge 'unique_coords' into 'all_mean_lengths' based on 'id'
all_mean_lengths <- merge(all_mean_lengths, unique_coords, by = "id")
glimpse(all_mean_lengths)
# Create an empty data frame to store mean lengths from all shapefiles
all_mean_lengths <- data.frame()
# Initialize an empty dataframe to store ID, lat, and lon
unique_coords <- data.frame(id = character(0), lat = numeric(0), lon = numeric(0))
# Loop through the shapefile filenames
for (filename in shapefile_filenames) {
cat("Processing:", filename, "\n")
# Read the shapefile
shapefile <- st_read(filename)
# Extract the date from the filename using regular expressions
date <- gsub(".*_(\\d{8})_.*", "\\1", filename)
# Convert the shapefile to a dataframe
shapefile_df <- as.data.frame(shapefile) %>%
dplyr::select(id, Location, Status, Measure) %>%
glimpse()
# Calculate the length of each line
shapefile_df$LineLength <- st_length(shapefile)
# Calculate the center coordinates (latitude and longitude) for each polygon
center_coords <- st_centroid(shapefile)
# Extract latitude and longitude for each unique 'id'
coordinates <- center_coords %>%
as.data.frame() %>%
rename(lat = Y, lon = X)
# Ensure 'id' is character type
coordinates$id <- as.character(shapefile_df$id)
# Add the unique coordinates to the 'unique_coords' dataframe
unique_coords <- bind_rows(unique_coords, coordinates)
# Add a "date" column to the dataframe
shapefile_df$date <- date
# Group by 'date', 'id', and calculate the mean length for each group
mean_lengths <- shapefile_df %>%
na.omit() %>%
filter(Location == "Cloates") %>%
group_by(date, id) %>%
dplyr::mutate(MeanLength = mean(LineLength))
# Append the mean lengths to the 'all_mean_lengths' data frame
all_mean_lengths <- bind_rows(all_mean_lengths, mean_lengths)
cat("Processed:", filename, "\n")
}
# Merge 'unique_coords' into 'all_mean_lengths' based on 'id'
all_mean_lengths <- merge(all_mean_lengths, unique_coords, by = "id")
glimpse(all_mean_lengths)
# Initialize an empty dataframe to store ID, lat, and lon
unique_coords <- data.frame(id = character(0), lat = numeric(0), lon = numeric(0))
# Loop through the shapefile filenames
for (filename in shapefile_filenames) {
cat("Processing:", filename, "\n")
# Read the shapefile
shapefile <- st_read(filename)
# Extract the date from the filename using regular expressions
date <- gsub(".*_(\\d{8})_.*", "\\1", filename)
# Convert the shapefile to a dataframe
shapefile_df <- as.data.frame(shapefile) %>%
dplyr::select(id, Location, Status, Measure) %>%
glimpse()
# Calculate the length of each line
shapefile_df$LineLength <- st_length(shapefile)
# Calculate the center coordinates (latitude and longitude) for each polygon
center_coords <- st_centroid(shapefile)
# Extract latitude and longitude for each unique 'id'
coordinates <- center_coords %>%
as.data.frame() %>%
rename(lat = Y, lon = X)  # Corrected column names here
# Ensure 'id' is character type
coordinates$id <- as.character(shapefile_df$id)
# Add the unique coordinates to the 'unique_coords' dataframe
unique_coords <- bind_rows(unique_coords, coordinates)
# Add a "date" column to the dataframe
shapefile_df$date <- date
# ...
cat("Processed:", filename, "\n")
}
# Initialize an empty dataframe to store ID, lat, and lon
unique_coords <- data.frame(id = character(0), lat = numeric(0), lon = numeric(0))
# Loop through the shapefile filenames
for (filename in shapefile_filenames) {
cat("Processing:", filename, "\n")
# Read the shapefile
shapefile <- st_read(filename)
# Extract the date from the filename using regular expressions
date <- gsub(".*_(\\d{8})_.*", "\\1", filename)
# Convert the shapefile to a dataframe
shapefile_df <- as.data.frame(shapefile) %>%
dplyr::select(id, Location, Status, Measure) %>%
glimpse()
# Calculate the length of each line
shapefile_df$LineLength <- st_length(shapefile)
# Calculate the center coordinates (latitude and longitude) for each polygon
center_coords <- st_centroid(shapefile)
# Extract latitude and longitude for each unique 'id'
coordinates <- center_coords %>%
as.data.frame()
# Ensure 'id' is character type
coordinates$id <- as.character(shapefile_df$id)
# Rename the columns
coordinates <- coordinates %>%
rename(lat = X, lon = Y)
# Add the unique coordinates to the 'unique_coords' dataframe
unique_coords <- bind_rows(unique_coords, coordinates)
# Add a "date" column to the dataframe
shapefile_df$date <- date
# ...
cat("Processed:", filename, "\n")
}
# Merge 'unique_coords' into 'all_mean_lengths' based on 'id'
all_mean_lengths <- merge(all_mean_lengths, unique_coords, by = "id")
library(raster)
library(rgdal)
library(sp)
library(sf)
library(rgeos)
library(tidyverse)
#install.packages("Rmisc")
#library(geosphere)
library(maptools)
library(Rmisc)
library(mapdata)
# Study name---
study<-"seasonal.halos.ningaloo"
## Set your working directory ----
working.dir <-  "~/Repositories/Seasonal_Halos_Ningaloo"
## Save these directory names to use later----
data.dir<-paste(working.dir,"Data",sep="/")
plots.dir=paste(working.dir,"Plots",sep="/")
tidy.dir<-paste(data.dir,"Tidy",sep="/")
raw.dir<-paste(data.dir,"Raw",sep="/")
error.dir=paste(data.dir,"Errors to check",sep="/")
shapefile.dir <- paste(data.dir,"Shapefiles",sep="/")
# Clear memory ----
rm(list=ls())
library(raster)
library(rgdal)
library(sp)
library(sf)
library(rgeos)
library(tidyverse)
#install.packages("Rmisc")
#library(geosphere)
library(maptools)
library(Rmisc)
library(mapdata)
# Study name---
study<-"seasonal.halos.ningaloo"
## Set your working directory ----
working.dir <-  "~/Repositories/Seasonal_Halos_Ningaloo"
## Save these directory names to use later----
data.dir<-paste(working.dir,"Data",sep="/")
plots.dir=paste(working.dir,"Plots",sep="/")
tidy.dir<-paste(data.dir,"Tidy",sep="/")
raw.dir<-paste(data.dir,"Raw",sep="/")
error.dir=paste(data.dir,"Errors to check",sep="/")
shapefile.dir <- paste(data.dir,"Shapefiles",sep="/")
dir()
setwd(tidy.dir)
dir()
halos <- st_read("Halos_NMP.shp")
setwd(shapefile.dir)
setwd(shapefile.dir)
dir()
halos <- st_read("Halos_NMP.shp")
names(halos)
halos
halo_centre_cloates <- halos %>%
filter(Centre=="Y")%>%
filter(Location == "Cloates")%>%
glimpse()
# Clean and repair the geometry
halo_centre_cloates <- st_make_valid(halo_centre_cloates)
# Calculate the area of shapes and add it as a new variable
halo_centre_cloates$area <- st_area(halo_centre_cloates)
halo_centre_cloates
halo_centre_cloates <- halo_centre_cloates[-16, ]
halo_centre_cloates$center <- st_centroid(halo_centre_cloates)
halo_centre_cloates$halo_lat <- st_coordinates(halo_centre_cloates$center)[, 2]
halo_centre_cloates$halo_lon <- st_coordinates(halo_centre_cloates$center)[, 1]
head(halo_centre_cloates)
# Convert the shapefile to a data frame
patchreef_data_frame <- st_drop_geometry(halo_centre_cloates)%>%
dplyr::select(id, Location, area, halo_lat, halo_lon)%>%
glimpse()
patchreef_data_frame
w <- map_data("worldHires", ylim = c(-22.37, -22.75), xlim = c(113.78, 113.62))
ggplot(data = patchreef_data_frame, aes(x = halo_lon, y = halo_lat)) +
geom_polygon(data = w, aes(x = long, y = lat, group = group), fill = "grey80") +
geom_raster(interpolate = FALSE) +
# scale_fill_gradientn(colours = mycolor, na.value = NA) +
theme_bw() + ylab("latitude") + xlab("longitude") +
coord_fixed(1.3, xlim = c(113, 114.5),  ylim = c(-22, -23)) + ggtitle("Checking sptial extent")
ggplot(data = patchreef_data_frame, aes(x = halo_lon, y = halo_lat)) +
geom_polygon(data = w, aes(x = long, y = lat, group = group), fill = "grey80") +
geom_point(size=3) +
# scale_fill_gradientn(colours = mycolor, na.value = NA) +
theme_bw() + ylab("latitude") + xlab("longitude")
coord_fixed(1.3, xlim = c(113, 114.5),  ylim = c(-22, -23)) + ggtitle("Checking sptial extent")
ggplot(data = patchreef_data_frame, aes(x = halo_lon, y = halo_lat)) +
geom_polygon(data = w, aes(x = long, y = lat, group = group), fill = "grey80") +
geom_point(size=3) +
# scale_fill_gradientn(colours = mycolor, na.value = NA) +
theme_bw() + ylab("latitude") + xlab("longitude") +
coord_fixed(1.3, xlim = c(113, 114.5),  ylim = c(-22, -23)) + ggtitle("Checking sptial extent")
write.csv(patchreef_data_frame, "halos_cloates.csv", row.names = FALSE)
setwd(tidy.dir)
# Save the data frame as a CSV file
write.csv(patchreef_data_frame, "patchreef_area_cloates.csv", row.names = FALSE)
write.csv(patchreef_data_frame, "halos_cloates.csv", row.names = FALSE)
